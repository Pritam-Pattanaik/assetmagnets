generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  mediaItems    Media[]
  posts         Post[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  featured    Boolean   @default(false)
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  categoryId  String?
  author      User      @relation(fields: [authorId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  media       Media[]   @relation("MediaToPost")
  tags        Tag[]     @relation("PostToTag")
}

model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  posts       Post[]
}

model Tag {
  id    String @id @default(cuid())
  name  String
  slug  String @unique
  posts Post[] @relation("PostToTag")
}

model Media {
  id         String   @id @default(cuid())
  name       String
  url        String
  type       String
  size       Int
  alt        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  uploadedBy String
  user       User     @relation(fields: [uploadedBy], references: [id])
  posts      Post[]   @relation("MediaToPost")
}

model Service {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String
  icon        String?
  color       String?
  details     String[]  @default([])
  active      Boolean   @default(true)
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]
}

model Project {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String
  image       String?
  clientName  String?
  completed   Boolean   @default(false)
  completedAt DateTime?
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id])
}

model ContactSubmission {
  id        String           @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  status    SubmissionStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model JobApplication {
  id           String            @id @default(cuid())
  name         String
  email        String
  phone        String?
  resumeUrl    String
  coverLetter  String?
  position     String
  status       ApplicationStatus @default(RECEIVED)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  jobListingId String
  jobListing   JobListing        @relation(fields: [jobListingId], references: [id])
}

model JobListing {
  id               String           @id @default(cuid())
  title            String
  slug             String           @unique
  description      String
  requirements     String
  location         String
  type             JobType
  salary           String?
  active           Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  responsibilities String
  applications     JobApplication[]
}

model Testimonial {
  id         String   @id @default(cuid())
  clientName String
  company    String?
  position   String?
  content    String
  rating     Int      @default(5)
  image      String?
  featured   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ContactInfo {
  id          String   @id @default(cuid())
  name        String
  country     String
  address     String
  phone       String
  email       String
  officeHours String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SocialMedia {
  id        String   @id @default(cuid())
  platform  String   @unique
  url       String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  EDITOR
  ADMIN
  SUPER_ADMIN
}

enum SubmissionStatus {
  PENDING
  REVIEWED
  RESPONDED
  ARCHIVED
}

enum ApplicationStatus {
  RECEIVED
  REVIEWING
  INTERVIEW
  REJECTED
  HIRED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
  INTERNSHIP
}
